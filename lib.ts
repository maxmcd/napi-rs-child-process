/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

import { existsSync, readFileSync } from 'node:fs';
import { join } from "node:path";
import { fileURLToPath } from "node:url";
import { createRequire } from "module";
const require = createRequire(import.meta.url);

const __dirname = fileURLToPath(new URL(".", import.meta.url));

const { platform, arch } = process;

let nativeBinding = null;
let localFileExisted = false;
let loadError = null;

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== "function") {
    try {
      const lddPath = require("child_process")
        .execSync("which ldd")
        .toString()
        .trim();
      return readFileSync(lddPath, "utf8").includes("musl");
    } catch (e) {
      return true;
    }
  } else {
    const { glibcVersionRuntime } =
      // This returns an object https://github.com/nodejs/diagnostics/issues/315
      (
        process.report.getReport() as any as {
          header: { glibcVersionRuntime: any };
        }
      ).header;
    return !glibcVersionRuntime;
  }
}

switch (platform) {
  case "android":
    switch (arch) {
      case "arm64":
        localFileExisted = existsSync(
          join(__dirname, "napi-rs-child-process.android-arm64.node")
        );
        try {
          if (localFileExisted) {
            nativeBinding = require("./napi-rs-child-process.android-arm64.node");
          } else {
            nativeBinding = require("napi-rs-child-process-android-arm64");
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case "arm":
        localFileExisted = existsSync(
          join(__dirname, "napi-rs-child-process.android-arm-eabi.node")
        );
        try {
          if (localFileExisted) {
            nativeBinding = require("./napi-rs-child-process.android-arm-eabi.node");
          } else {
            nativeBinding = require("napi-rs-child-process-android-arm-eabi");
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`);
    }
    break;
  case "win32":
    switch (arch) {
      case "x64":
        localFileExisted = existsSync(
          join(__dirname, "napi-rs-child-process.win32-x64-msvc.node")
        );
        try {
          if (localFileExisted) {
            nativeBinding = require("./napi-rs-child-process.win32-x64-msvc.node");
          } else {
            nativeBinding = require("napi-rs-child-process-win32-x64-msvc");
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case "ia32":
        localFileExisted = existsSync(
          join(__dirname, "napi-rs-child-process.win32-ia32-msvc.node")
        );
        try {
          if (localFileExisted) {
            nativeBinding = require("./napi-rs-child-process.win32-ia32-msvc.node");
          } else {
            nativeBinding = require("napi-rs-child-process-win32-ia32-msvc");
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case "arm64":
        localFileExisted = existsSync(
          join(__dirname, "napi-rs-child-process.win32-arm64-msvc.node")
        );
        try {
          if (localFileExisted) {
            nativeBinding = require("./napi-rs-child-process.win32-arm64-msvc.node");
          } else {
            nativeBinding = require("napi-rs-child-process-win32-arm64-msvc");
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`);
    }
    break;
  case "darwin":
    localFileExisted = existsSync(
      join(__dirname, "napi-rs-child-process.darwin-universal.node")
    );
    try {
      if (localFileExisted) {
        nativeBinding = require("./napi-rs-child-process.darwin-universal.node");
      } else {
        nativeBinding = require("napi-rs-child-process-darwin-universal");
      }
      break;
    } catch {}
    switch (arch) {
      case "x64":
        localFileExisted = existsSync(
          join(__dirname, "napi-rs-child-process.darwin-x64.node")
        );
        try {
          if (localFileExisted) {
            nativeBinding = require("./napi-rs-child-process.darwin-x64.node");
          } else {
            nativeBinding = require("napi-rs-child-process-darwin-x64");
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case "arm64":
        localFileExisted = existsSync(
          join(__dirname, "napi-rs-child-process.darwin-arm64.node")
        );
        try {
          if (localFileExisted) {
            nativeBinding = require("./napi-rs-child-process.darwin-arm64.node");
          } else {
            nativeBinding = require("napi-rs-child-process-darwin-arm64");
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`);
    }
    break;
  case "freebsd":
    if (arch !== "x64") {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);
    }
    localFileExisted = existsSync(
      join(__dirname, "napi-rs-child-process.freebsd-x64.node")
    );
    try {
      if (localFileExisted) {
        nativeBinding = require("./napi-rs-child-process.freebsd-x64.node");
      } else {
        nativeBinding = require("napi-rs-child-process-freebsd-x64");
      }
    } catch (e) {
      loadError = e;
    }
    break;
  case "linux":
    switch (arch) {
      case "x64":
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, "napi-rs-child-process.linux-x64-musl.node")
          );
          try {
            if (localFileExisted) {
              nativeBinding = require("./napi-rs-child-process.linux-x64-musl.node");
            } else {
              nativeBinding = require("napi-rs-child-process-linux-x64-musl");
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, "napi-rs-child-process.linux-x64-gnu.node")
          );
          try {
            if (localFileExisted) {
              nativeBinding = require("./napi-rs-child-process.linux-x64-gnu.node");
            } else {
              nativeBinding = require("napi-rs-child-process-linux-x64-gnu");
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "arm64":
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, "napi-rs-child-process.linux-arm64-musl.node")
          );
          try {
            if (localFileExisted) {
              nativeBinding = require("./napi-rs-child-process.linux-arm64-musl.node");
            } else {
              nativeBinding = require("napi-rs-child-process-linux-arm64-musl");
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, "napi-rs-child-process.linux-arm64-gnu.node")
          );
          try {
            if (localFileExisted) {
              nativeBinding = require("./napi-rs-child-process.linux-arm64-gnu.node");
            } else {
              nativeBinding = require("napi-rs-child-process-linux-arm64-gnu");
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "arm":
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, "napi-rs-child-process.linux-arm-musleabihf.node")
          );
          try {
            if (localFileExisted) {
              nativeBinding = require("./napi-rs-child-process.linux-arm-musleabihf.node");
            } else {
              nativeBinding = require("napi-rs-child-process-linux-arm-musleabihf");
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, "napi-rs-child-process.linux-arm-gnueabihf.node")
          );
          try {
            if (localFileExisted) {
              nativeBinding = require("./napi-rs-child-process.linux-arm-gnueabihf.node");
            } else {
              nativeBinding = require("napi-rs-child-process-linux-arm-gnueabihf");
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "riscv64":
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, "napi-rs-child-process.linux-riscv64-musl.node")
          );
          try {
            if (localFileExisted) {
              nativeBinding = require("./napi-rs-child-process.linux-riscv64-musl.node");
            } else {
              nativeBinding = require("napi-rs-child-process-linux-riscv64-musl");
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, "napi-rs-child-process.linux-riscv64-gnu.node")
          );
          try {
            if (localFileExisted) {
              nativeBinding = require("./napi-rs-child-process.linux-riscv64-gnu.node");
            } else {
              nativeBinding = require("napi-rs-child-process-linux-riscv64-gnu");
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "s390x":
        localFileExisted = existsSync(
          join(__dirname, "napi-rs-child-process.linux-s390x-gnu.node")
        );
        try {
          if (localFileExisted) {
            nativeBinding = require("./napi-rs-child-process.linux-s390x-gnu.node");
          } else {
            nativeBinding = require("napi-rs-child-process-linux-s390x-gnu");
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`);
    }
    break;
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError;
  }
  throw new Error(`Failed to load native binding`);
}

export interface NapiSpawnOptions {
  cwd?: string;
  env?: object;
  argv0?: string;
}
export const opSpawn: (
  cmd: string,
  args: Array<string>,
  spawnOptions: NapiSpawnOptions,
  exitCb: (err: Error | null, arg0: number, arg1: number) => any,
  stdoutCb: (err: Error | null, arg: Buffer | undefined | null) => any,
  stderrCb: (err: Error | null, arg: Buffer | undefined | null) => any
) => Promise<number> = nativeBinding.opSpawn;

export const spawn: (
  cmd: string,
  args: Array<string>,
  spawnOptions: NapiSpawnOptions,
  exitCb: (err: Error | null, arg0: number, arg1: number) => any,
  stdoutCb: (err: Error | null, arg: Buffer | undefined | null) => any,
  stderrCb: (err: Error | null, arg: Buffer | undefined | null) => any
) => Promise<number> = nativeBinding.spawn;
